// Generated by CoffeeScript 1.4.0
(function() {

  document.Overwatch = {
    /*
      #  Displays the section corresponding to the tab the user clicked on and hides
      #  whatever was active before.
    */

    selectTab: function(tabName) {
      var activeSection, activeTab, section, sections, tab, tabs, _i, _j, _len, _len1;
      tabs = document.getElementsByClassName("statusline");
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        tab.classList.remove("selected");
      }
      activeTab = document.getElementById("" + tabName + "-status");
      activeTab.classList.add("selected");
      sections = document.getElementsByClassName("section");
      for (_j = 0, _len1 = sections.length; _j < _len1; _j++) {
        section = sections[_j];
        section.classList.remove("selected");
      }
      activeSection = document.getElementById("" + tabName + "-section");
      return activeSection.classList.add("selected");
    },
    /*
      #  Show/hide the Minecraft map
    */

    toggleMap: function() {
      var linkElem, mapElem;
      mapElem = document.getElementById("map-frame");
      linkElem = document.getElementById("toggle-map");
      if (mapElem.style.display === "block") {
        mapElem.style.display = "none";
        return linkElem.innerHTML = "Show Map";
      } else {
        mapElem.style.display = "block";
        return linkElem.innerHTML = "Hide Map";
      }
    },
    /*
      #  Make sure everything is the right size
    */

    resize: function() {
      var browserHeight, rect, section, sections, _i, _len, _results;
      sections = document.getElementsByClassName("section");
      rect = sections[0].getBoundingClientRect();
      browserHeight = document.documentElement.clientHeight;
      _results = [];
      for (_i = 0, _len = sections.length; _i < _len; _i++) {
        section = sections[_i];
        _results.push(section.style.height = (browserHeight - rect.top - 15) + "px");
      }
      return _results;
    },
    /*
      #  EventSource message handler
      #  Updates the status of whatever servers it knows about with the latest information.
    */

    updateStatus: function(e) {
      var countElem, field, key, sectionElem, selector, serverStatus, status, statusElem, tabElem, valueElem, _results;
      if (!(e.data != null)) {
        return;
      }
      status = JSON.parse(e.data);
      _results = [];
      for (key in status) {
        tabElem = document.getElementById("" + key + "-status");
        if (tabElem != null) {
          statusElem = tabElem.querySelector(".status");
          if (status[key]["status"]) {
            statusElem.classList.remove("offline");
            statusElem.classList.add("online");
            statusElem.innerHTML = "Online";
          } else {
            statusElem.classList.remove("online");
            statusElem.classList.add("offline");
            statusElem.innerHTML = "Offline";
          }
        }
        countElem = tabElem.querySelector(".player-count");
        if (countElem != null) {
          countElem.innerHTML = "(" + status[key]['player_count'] + ")";
        }
        serverStatus = status[key];
        sectionElem = document.getElementById("" + key + "-section");
        if (sectionElem != null) {
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (field in serverStatus) {
              selector = "." + (field.replace(' ', '_')) + "-value";
              valueElem = sectionElem.querySelector(selector);
              if (valueElem != null) {
                if (field === "player_list") {
                  if (serverStatus[field] === "") {
                    serverStatus[field] = "None";
                  } else {
                    serverStatus[field] = serverStatus[field].join(', ');
                  }
                } else if (field === "motd") {
                  serverStatus[field] = URI.withinString(serverStatus[field], function(url) {
                    return "<a href=\"" + url + "\">" + url + "</a>";
                  });
                }
                _results1.push(valueElem.innerHTML = serverStatus[field]);
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  /*
  #  Once we know the document is complete, select the first tab,
  #  make sure everything is sized correctly, and set up the refresh event.
  */


  document.addEventListener("DOMContentLoaded", function(event) {
    var evtSource, selection;
    if (document.location.hash !== "") {
      selection = document.location.hash.substring(1);
      document.Overwatch.selectTab(selection);
    } else {
      selectTab("minecraft");
    }
    document.Overwatch.resize();
    evtSource = new EventSource("refresh.rb");
    return evtSource.onmessage = document.Overwatch.updateStatus;
  });

  /*
  #  Make sure everything is sized correctly when there's a resize event
  */


  window.onresize = function(event) {
    return document.Overwatch.resize();
  };

}).call(this);
